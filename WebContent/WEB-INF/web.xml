<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>SpringFrameTest</display-name>
<!--   <servlet> -->
<!--     <servlet-name>spring-restful</servlet-name> -->
<!--     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> -->
<!--     <init-param> -->
<!--       <param-name>contextConfigLocation</param-name> -->
<!--       <param-value>/WEB-INF/bean.xml</param-value> -->
<!--     </init-param> -->
<!--     <load-on-startup>1</load-on-startup> -->
<!--   </servlet> -->
<!--   <servlet-mapping> -->
<!--     <servlet-name>spring-restful</servlet-name> -->
<!--     <url-pattern>/</url-pattern> -->
<!--   </servlet-mapping> -->


	<!-- ===================================================== -->
	<!--                  配置spring                            -->
	<!-- ===================================================== -->
  	<!-- 注册IntrospectorCleanupListener监听器以解决struts等框架可能产生的内存泄露问题  -->
	<!--  IntrospectorCleanupListener应该注册为web.xml中的第一个Listener，
		      在任何其他Listener之前注册，比如在Spring's ContextLoaderListener注册之前，
	                 才能确保IntrospectorCleanupListener在Web应用的生命周期适当时机生效。
	 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:config/spring/applicationContext.xml</param-value>
	</context-param>
	
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- spring MVC过滤器 字符集过滤器 -->
	<filter>
		<filter-name>encoding-filter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding-filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
  <!-- DispatcherServlet为spring的调度器，主要是映射方法的，比如在url-pattern中配置"*.do"的话就是拦截后缀为".do"的方法的映射 -->
  <!-- 
	  	0)load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法)。
		2)它的值必须是一个整数，表示servlet应该被载入的顺序
		2)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
		3)当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。
		4)正数的值越小，该servlet的优先级越高，应用启动时就越先加载。
		5)当值相同时，容器就会自己选择顺序来加载。
		所以，<load-on-startup>x</load-on-startup>，中x的取值1，2，3，4，5代表的是优先级，而非启动延迟时间。
	-->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 配置log4j -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>30000</param-value>
	</context-param>
	
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>SpringFrameTest</param-value>
	</context-param>
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>